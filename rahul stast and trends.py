# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F6NZxDduhcSSWTFA4KJ3ybmjigbRKxIW
"""

from matplotlib import pyplot as mat_plot 
# importing matplot library 
import pandas as pd 
# impoting  pandas library 
import numpy as np 
# importing numpy library 


#CREATE FUNCTION

def read_dataset(Df_file):
    data_Agricultural1=pd.read_csv(Df_file,skiprows=4)
    #read dataset and skip rows 4 
    data_Agricultural2=data_Agricultural1.drop(['Unnamed: 66', 'Indicator Code',  'Country Code', 'Indicator Name'],axis=1)
    # drop columns 
    data_Agricultural3=data_Agricultural2.set_index("Country Name")
    #set index name
    data_Agricultural4=data_Agricultural3.T 
    #transposed format dataset
    data_Agricultural4.reset_index(inplace=True)
    #reset index name 
    data_Agricultural4.rename(columns = {'index':'Year'}, inplace = True) 
    # rename colamns name 
    return data_Agricultural1,data_Agricultural4 #return dataframe name


#Read dataset path and make two data frame. 

# read dataset path  and make  two data frame 
Df_file="/content/drive/MyDrive/shiv/Rahul/API_1_DS2_en_csv_v2_4550063.csv" 
#make two data frame 
data_ag1,data_ag2=read_dataset(Df_file)
# showing data frame 1
data_ag1.head(4)

data_ag1.info() #showing dataset information

data_ag1.describe() #showing data inthe dataframe.

data_ag2.head(6) # showing data frame2 


#RURAL POPULATION CORRELATION WITH COUNTRY AND YEAR

data_corr = data_ag1[data_ag1['Indicator Name']=='Rural population']  
data_corr_1 = data_corr.pivot_table(index=['Country Name'], values = ['2000', '2002', '2004','2006'])  
data_corr_1.head(20)  


#TIME SERIES ANALYSIS FOR FOREST AREA(sq. km)

df_time= data_ag1[data_ag1['Indicator Name']=='Forest area (sq. km)']  
df_time1=df_time.set_index("Country Name") 
df_time2=df_time1.drop(['Country Code', 'Unnamed: 66', 'Indicator Name', 'Indicator Code'],axis=1)
df_time3=df_time2.T
df_time4 =df_time3.reset_index()

df_time5=df_time4.pivot_table(index=['index'], values=['Micronesia, Fed. Sts.', 'Gabon', 'United Kingdom', 'Georgia', 'Ghana', 'Gibraltar', 'Guinea',  'Greece', 'Grenada', 'Greenland', 'Guatemala'])  
mat_plot.figure(figsize = (18,8)) # define figure size 
mat_plot.plot(df_time5.head(40),'-*')
mat_plot.xticks(rotation=90) 
mat_plot.legend(['Micronesia, Fed. Sts.', 'Gabon', 'United Kingdom', 'Georgia', 'Ghana', 'Gibraltar', 'Guinea',  'Greece', 'Grenada', 'Greenland', 'Guatemala'],bbox_to_anchor =(1.0, 1.1), ncol = 1) 
mat_plot.xlabel('Year')

mat_plot.ylabel('Comparison ') 
 
mat_plot.title('Forest area (sq. km)') 
# define title name 
mat_plot.show() # showing graph 

#TIME SERIES ANALYSIS FOR ARABLE LAND (% of land area)

df_time6= data_ag1[data_ag1['Indicator Name']== 'Arable land (% of land area)']  
df_time7=df_time6.set_index("Country Name") 
df_time8=df_time7.drop(['Indicator Name', 'Indicator Code', 'Country Code', 'Unnamed: 66'],axis=1)
df_time9=df_time8.T
df_time10 = df_time9.reset_index()

df_time11=df_time10.pivot_table(index=['index'], values=['Micronesia, Fed. Sts.', 'Gabon', 'United Kingdom', 'Georgia', 'Ghana', 'Gibraltar', 'Guinea',  'Greece', 'Grenada', 'Greenland', 'Guatemala'])  
mat_plot.figure(figsize = (18,8)) # define figure size 
mat_plot.plot(df_time11.head(40),'-*')
mat_plot.xticks(rotation=90)  # rotation x axis data
mat_plot.legend(['Micronesia, Fed. Sts.', 'Gabon', 'United Kingdom', 'Georgia', 'Ghana', 'Gibraltar', 'Guinea',  'Greece', 'Grenada', 'Greenland', 'Guatemala',],bbox_to_anchor =(1.0, 1.1), ncol = 1) 
mat_plot.xlabel('Year')
mat_plot.ylabel('Comparison ') 
# set title name 
mat_plot.title( 'Arable land (% of land area)') 
# define title name 
mat_plot.show() # showing graph


#PLOTTING PIE CHART FOR TOP 10 COUNTRY

df_pie= data_ag1[data_ag1['Indicator Name']=='Agricultural irrigated land (% of total agricultural land)'] 

# we picked up top 10 country 
mat_plot.subplot(2,1,1)
Top_Country = df_pie.groupby('Country Name')['2001'].max().sort_values(ascending = False).head(10)   
# passing all parameter for graph visualiation.            
Top_Country.plot(kind = "pie",figsize = (20 , 14),fontsize=12,  title="Top 10 Country With Agricultural irrigated land (% of total agricultural land)",autopct='%1.0f%%'); 
                                                                                                 
mat_plot.subplot(2,1,2) 
# we picked up top 10 country 
Top_Country = df_pie.groupby('Country Name')['2012'].max().sort_values(ascending = False).head(10)   
# passing all parameter for graph visualiation.            
Top_Country.plot(kind = "pie",figsize = (20 , 14),fontsize=12,  title="Top 10 Country With Agricultural irrigated land (% of total agricultural land)",autopct='%1.0f%%'); 


#PLOTTING CORRELATION MATRIX FOR JAPAN

#creating function for country
def function(Country):
  df_matrix = data_ag1[data_ag1['Country Name']==f'{Country}'] 
  df_matrix = df_matrix.drop(['Country Name', 'Unnamed: 66', 'Country Code', 'Indicator Code'],axis=1) 
  df_matrix = df_matrix.T
  df_matrix1=df_matrix.iloc[0] 
  df_matrix=df_matrix[1:] 
  df_matrix.columns=df_matrix1
  df_matrix = df_matrix.reset_index(drop=True)
  return df_matrix

 df_country=function('Japan') # fatch country name 
df_country.to_csv('Japan.csv') # create new data set file 
df3=pd.read_csv('/content/Japan.csv') # read dataset for Nepal country 
data1=df3.drop(['Unnamed: 0'],axis=1) # drop columns 
df_drop = data1.fillna(0) # fill null values 


#SET LABELS 
df_matrix1 = df_drop[[ 'Annual freshwater withdrawals, agriculture (% of total freshwater withdrawal)','Agricultural nitrous oxide emissions (% of total)', 'Agricultural nitrous oxide emissions (thousand metric tons of CO2 equivalent)','Agricultural methane emissions (% of total)', 'Agricultural methane emissions (thousand metric tons of CO2 equivalent)', 'Access to electricity, rural (% of rural population)','Cereal yield (kg per hectare)', 'Surface area (sq. km)']]

df_corr1=df_matrix1.corr() #correlation
df_corr1.head() 

arr=df_corr1.to_numpy()
labs=df_matrix1.columns
mat_plot.rcParams.update({'font.size': 10})
fig, Axis = mat_plot.subplots(figsize=(20,12)) # set figure size 
im = Axis.imshow(df_corr1,cmap="Oranges_r")
# labels lenth 
Axis.set_xticks(np.arange(len(labs)))
Axis.set_yticks(np.arange(len(labs)))

Axis.set_xticklabels(labs)
Axis.set_yticklabels(labs)

mat_plot.setp(Axis.get_xticklabels(), rotation=45, ha="right",rotation_mode="anchor") 

for i in range(len(labs)):
    for j in range(len(labs)):
        text = Axis.text(j, i, round(arr[i, j],2), ha="center", va="center", color="black") 

Axis.set_title("Japan") 
mat_plot.show() 


#PLOTTING CORRELATION MATRIX FOR NIGERIA

df_country1=function('Nigeria') # fatch country name 
df_country1.to_csv('Nigeria.csv') # create new data set file 
data_cty2=pd.read_csv('/content/Nigeria.csv') # read dataset for Nepal country 
data_cty3=data_cty2.drop(['Unnamed: 0'],axis=1) # drop unnamed columns 
df_drop = data_cty3.fillna(0) # fill null values 

# set labels 
df_matrix2 =df_drop[[ 'Annual freshwater withdrawals, agriculture (% of total freshwater withdrawal)', 'Agricultural nitrous oxide emissions (% of total)', 'Agricultural nitrous oxide emissions (thousand metric tons of CO2 equivalent)','Agricultural methane emissions (% of total)', 'Agricultural methane emissions (thousand metric tons of CO2 equivalent)', 'Access to electricity, rural (% of rural population)','Cereal yield (kg per hectare)', 'Surface area (sq. km)']]

# showing correlation  data
df_corr2=df_matrix2.corr() 
df_corr2.head()

# plotting correlation matrix 
mat_plot.rcParams.update({'font.size': 10})
arr=df_corr2.to_numpy()
labs=df_matrix2.columns
fig, Axis = mat_plot.subplots(figsize=(20,12)) # set figure size 
im = Axis.imshow(df_corr2,cmap="Wistia")
# lables lenth 
Axis.set_xticks(np.arange(len(labs)))
Axis.set_yticks(np.arange(len(labs)))

Axis.set_xticklabels(labs)
Axis.set_yticklabels(labs)

mat_plot.setp(Axis.get_xticklabels(), rotation=45, ha="right",rotation_mode="anchor") 

for i in range(len(labs)):
    for j in range(len(labs)):
        text = Axis.text(j, i, round(arr[i, j],2), ha="center", va="center", color="black") 
# set title name 
Axis.set_title("Nigeria") 
mat_plot.show()  # showing graph 


#BAR GRAPH FOR ARABLE LAND (hectares)

mat_plot.rcParams.update({'font.size': 18})
df_bar1= data_ag1[data_ag1['Indicator Name'] == 'Arable land (hectares)']
df_bar=df_bar1.pivot_table(index=['Country Name'], values=['1975', '1985', '1995', '2005']) 
mat_plot.rcParams['figure.figsize']=(21,7) # define figure size
df_bar1= df_bar.head(22)
df_bar1.plot.bar(color=['DarkTurquoise', 'Chartreuse', 'Chocolate',  'MediumSpringGreen', 'OrangeRed'])
mat_plot.xlabel('Country Name')

mat_plot.ylabel('Comparision')

mat_plot.title('Arable land (hectares)') 
# define title name 
mat_plot.show();


#BAR GRAPH FOR AGRICULTURAL METHANE EMISSION (% of total)

# define figure size
df_bar2= data_ag1[data_ag1['Indicator Name'] =='Agricultural methane emissions (% of total)']
df_bar3=df_bar2.pivot_table(index=['Country Name'], values=['1975', '1985', '1995', '2005']) 
mat_plot.rcParams['figure.figsize']=(22,7) 
df_bar1= df_bar3.head(25)
df_bar1.plot.bar(color=['GoldenRod', 'Lime', 'HotPink',  'Blue', 'DeepPink'])
mat_plot.xlabel('Country Name')

mat_plot.ylabel('Comparision')

mat_plot.title('Agricultural methane emissions (% of total)') 
# define title name 
mat_plot.show();